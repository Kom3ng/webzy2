/* tslint:disable */
/* eslint-disable */
/**
 * 中育API
 * 中育的api
 *
 * The version of the OpenAPI document: 1.0
 * Contact: 3262392248@qq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddCatalog200Response,
  AddCatalogRequest,
  AlterQuoraCatalogSortRequestInner,
  CreateSession200Response,
  CreateSessionRequest,
  GetCatalogs200Response,
  GetCollectSessions200Response,
  GetCollectSessionsRequest,
  GetMessages200Response,
  GetMessagesRequest,
  GetQuoraStudentTopics200Response,
  GetSessionById200Response,
  GetSessions200Response,
  GetSessionsRequest,
  ResetReadState200Response,
  SearchQuora200Response,
  SearchQuoraRequest,
  SetMessageRead200Response,
  SetQuoraCollect200Response,
  SetQuoraCollectRequest,
  UpdateCatalogRequest,
} from '../models/index';
import {
    AddCatalog200ResponseFromJSON,
    AddCatalog200ResponseToJSON,
    AddCatalogRequestFromJSON,
    AddCatalogRequestToJSON,
    AlterQuoraCatalogSortRequestInnerFromJSON,
    AlterQuoraCatalogSortRequestInnerToJSON,
    CreateSession200ResponseFromJSON,
    CreateSession200ResponseToJSON,
    CreateSessionRequestFromJSON,
    CreateSessionRequestToJSON,
    GetCatalogs200ResponseFromJSON,
    GetCatalogs200ResponseToJSON,
    GetCollectSessions200ResponseFromJSON,
    GetCollectSessions200ResponseToJSON,
    GetCollectSessionsRequestFromJSON,
    GetCollectSessionsRequestToJSON,
    GetMessages200ResponseFromJSON,
    GetMessages200ResponseToJSON,
    GetMessagesRequestFromJSON,
    GetMessagesRequestToJSON,
    GetQuoraStudentTopics200ResponseFromJSON,
    GetQuoraStudentTopics200ResponseToJSON,
    GetSessionById200ResponseFromJSON,
    GetSessionById200ResponseToJSON,
    GetSessions200ResponseFromJSON,
    GetSessions200ResponseToJSON,
    GetSessionsRequestFromJSON,
    GetSessionsRequestToJSON,
    ResetReadState200ResponseFromJSON,
    ResetReadState200ResponseToJSON,
    SearchQuora200ResponseFromJSON,
    SearchQuora200ResponseToJSON,
    SearchQuoraRequestFromJSON,
    SearchQuoraRequestToJSON,
    SetMessageRead200ResponseFromJSON,
    SetMessageRead200ResponseToJSON,
    SetQuoraCollect200ResponseFromJSON,
    SetQuoraCollect200ResponseToJSON,
    SetQuoraCollectRequestFromJSON,
    SetQuoraCollectRequestToJSON,
    UpdateCatalogRequestFromJSON,
    UpdateCatalogRequestToJSON,
} from '../models/index';

export interface AddCatalogOperationRequest {
    appName: string;
    appVersion: number;
    addCatalogRequest?: AddCatalogRequest;
}

export interface AlterQuoraCatalogSortRequest {
    appName: string;
    appVersion: number;
    alterQuoraCatalogSortRequestInner?: Array<AlterQuoraCatalogSortRequestInner>;
}

export interface CreateSessionOperationRequest {
    appName: string;
    appVersion: number;
    createSessionRequest?: CreateSessionRequest;
}

export interface DeleteCatalogRequest {
    appName: string;
    appVersion: number;
    id?: number;
}

export interface GetCollectSessionsOperationRequest {
    appName: string;
    appVersion: number;
    getCollectSessionsRequest?: GetCollectSessionsRequest;
}

export interface GetMessagesOperationRequest {
    appName: string;
    appVersion: number;
    getMessagesRequest?: GetMessagesRequest;
}

export interface GetQuoraStudentTopicsRequest {
    appName: string;
    appVersion: number;
}

export interface GetSessionByIdRequest {
    appName: string;
    appVersion: number;
    id?: number;
}

export interface GetSessionsOperationRequest {
    appName: string;
    appVersion: number;
    getSessionsRequest?: GetSessionsRequest;
}

export interface ResetReadStateRequest {
    appName: string;
    appVersion: number;
    sessionId?: number;
}

export interface SearchQuoraOperationRequest {
    appName: string;
    appVersion: number;
    searchQuoraRequest?: SearchQuoraRequest;
}

export interface SetQuoraCollectOperationRequest {
    appName: string;
    appVersion: number;
    setQuoraCollectRequest?: SetQuoraCollectRequest;
}

export interface UpdateCatalogOperationRequest {
    appName: string;
    appVersion: number;
    updateCatalogRequest?: UpdateCatalogRequest;
}

/**
 * 
 */
export class QuoraApi extends runtime.BaseAPI {

    /**
     * 新建目录
     */
    async addCatalogRaw(requestParameters: AddCatalogOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddCatalog200Response>> {
        if (requestParameters['appName'] == null) {
            throw new runtime.RequiredError(
                'appName',
                'Required parameter "appName" was null or undefined when calling addCatalog().'
            );
        }

        if (requestParameters['appVersion'] == null) {
            throw new runtime.RequiredError(
                'appVersion',
                'Required parameter "appVersion" was null or undefined when calling addCatalog().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['appName'] != null) {
            headerParameters['AppName'] = String(requestParameters['appName']);
        }

        if (requestParameters['appVersion'] != null) {
            headerParameters['AppVersion'] = String(requestParameters['appVersion']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/services/app/Quora/AddCatalog`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddCatalogRequestToJSON(requestParameters['addCatalogRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddCatalog200ResponseFromJSON(jsonValue));
    }

    /**
     * 新建目录
     */
    async addCatalog(requestParameters: AddCatalogOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddCatalog200Response> {
        const response = await this.addCatalogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async alterQuoraCatalogSortRaw(requestParameters: AlterQuoraCatalogSortRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResetReadState200Response>> {
        if (requestParameters['appName'] == null) {
            throw new runtime.RequiredError(
                'appName',
                'Required parameter "appName" was null or undefined when calling alterQuoraCatalogSort().'
            );
        }

        if (requestParameters['appVersion'] == null) {
            throw new runtime.RequiredError(
                'appVersion',
                'Required parameter "appVersion" was null or undefined when calling alterQuoraCatalogSort().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['appName'] != null) {
            headerParameters['AppName'] = String(requestParameters['appName']);
        }

        if (requestParameters['appVersion'] != null) {
            headerParameters['AppVersion'] = String(requestParameters['appVersion']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/services/app/Quora/AlterQuoraCatalogSortAsync`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['alterQuoraCatalogSortRequestInner']!.map(AlterQuoraCatalogSortRequestInnerToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResetReadState200ResponseFromJSON(jsonValue));
    }

    /**
     * 
     */
    async alterQuoraCatalogSort(requestParameters: AlterQuoraCatalogSortRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResetReadState200Response> {
        const response = await this.alterQuoraCatalogSortRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 创建随身答
     */
    async createSessionRaw(requestParameters: CreateSessionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateSession200Response>> {
        if (requestParameters['appName'] == null) {
            throw new runtime.RequiredError(
                'appName',
                'Required parameter "appName" was null or undefined when calling createSession().'
            );
        }

        if (requestParameters['appVersion'] == null) {
            throw new runtime.RequiredError(
                'appVersion',
                'Required parameter "appVersion" was null or undefined when calling createSession().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['appName'] != null) {
            headerParameters['AppName'] = String(requestParameters['appName']);
        }

        if (requestParameters['appVersion'] != null) {
            headerParameters['AppVersion'] = String(requestParameters['appVersion']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/services/app/Quora/CreateSession`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateSessionRequestToJSON(requestParameters['createSessionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateSession200ResponseFromJSON(jsonValue));
    }

    /**
     * 创建随身答
     */
    async createSession(requestParameters: CreateSessionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateSession200Response> {
        const response = await this.createSessionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 删除目录
     */
    async deleteCatalogRaw(requestParameters: DeleteCatalogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SetMessageRead200Response>> {
        if (requestParameters['appName'] == null) {
            throw new runtime.RequiredError(
                'appName',
                'Required parameter "appName" was null or undefined when calling deleteCatalog().'
            );
        }

        if (requestParameters['appVersion'] == null) {
            throw new runtime.RequiredError(
                'appVersion',
                'Required parameter "appVersion" was null or undefined when calling deleteCatalog().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['appName'] != null) {
            headerParameters['AppName'] = String(requestParameters['appName']);
        }

        if (requestParameters['appVersion'] != null) {
            headerParameters['AppVersion'] = String(requestParameters['appVersion']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/services/app/Quora/DeleteCatalog`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SetMessageRead200ResponseFromJSON(jsonValue));
    }

    /**
     * 删除目录
     */
    async deleteCatalog(requestParameters: DeleteCatalogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SetMessageRead200Response> {
        const response = await this.deleteCatalogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取目录
     */
    async getCatalogsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCatalogs200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/services/app/Quora/GetCatalogs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCatalogs200ResponseFromJSON(jsonValue));
    }

    /**
     * 获取目录
     */
    async getCatalogs(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCatalogs200Response> {
        const response = await this.getCatalogsRaw(initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async getCollectSessionsRaw(requestParameters: GetCollectSessionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCollectSessions200Response>> {
        if (requestParameters['appName'] == null) {
            throw new runtime.RequiredError(
                'appName',
                'Required parameter "appName" was null or undefined when calling getCollectSessions().'
            );
        }

        if (requestParameters['appVersion'] == null) {
            throw new runtime.RequiredError(
                'appVersion',
                'Required parameter "appVersion" was null or undefined when calling getCollectSessions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['appName'] != null) {
            headerParameters['AppName'] = String(requestParameters['appName']);
        }

        if (requestParameters['appVersion'] != null) {
            headerParameters['AppVersion'] = String(requestParameters['appVersion']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/services/app/Quora/GetCollectSessions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetCollectSessionsRequestToJSON(requestParameters['getCollectSessionsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCollectSessions200ResponseFromJSON(jsonValue));
    }

    /**
     * 
     */
    async getCollectSessions(requestParameters: GetCollectSessionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCollectSessions200Response> {
        const response = await this.getCollectSessionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async getMessagesRaw(requestParameters: GetMessagesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMessages200Response>> {
        if (requestParameters['appName'] == null) {
            throw new runtime.RequiredError(
                'appName',
                'Required parameter "appName" was null or undefined when calling getMessages().'
            );
        }

        if (requestParameters['appVersion'] == null) {
            throw new runtime.RequiredError(
                'appVersion',
                'Required parameter "appVersion" was null or undefined when calling getMessages().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['appName'] != null) {
            headerParameters['AppName'] = String(requestParameters['appName']);
        }

        if (requestParameters['appVersion'] != null) {
            headerParameters['AppVersion'] = String(requestParameters['appVersion']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/services/app/Quora/GetMessages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetMessagesRequestToJSON(requestParameters['getMessagesRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMessages200ResponseFromJSON(jsonValue));
    }

    /**
     * 
     */
    async getMessages(requestParameters: GetMessagesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMessages200Response> {
        const response = await this.getMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取随身答
     */
    async getQuoraStudentTopicsRaw(requestParameters: GetQuoraStudentTopicsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetQuoraStudentTopics200Response>> {
        if (requestParameters['appName'] == null) {
            throw new runtime.RequiredError(
                'appName',
                'Required parameter "appName" was null or undefined when calling getQuoraStudentTopics().'
            );
        }

        if (requestParameters['appVersion'] == null) {
            throw new runtime.RequiredError(
                'appVersion',
                'Required parameter "appVersion" was null or undefined when calling getQuoraStudentTopics().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['appName'] != null) {
            headerParameters['AppName'] = String(requestParameters['appName']);
        }

        if (requestParameters['appVersion'] != null) {
            headerParameters['AppVersion'] = String(requestParameters['appVersion']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/services/app/Quora/GetQuoraStudentTopicsAsync`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetQuoraStudentTopics200ResponseFromJSON(jsonValue));
    }

    /**
     * 获取随身答
     */
    async getQuoraStudentTopics(requestParameters: GetQuoraStudentTopicsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetQuoraStudentTopics200Response> {
        const response = await this.getQuoraStudentTopicsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getSessionByIdRaw(requestParameters: GetSessionByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSessionById200Response>> {
        if (requestParameters['appName'] == null) {
            throw new runtime.RequiredError(
                'appName',
                'Required parameter "appName" was null or undefined when calling getSessionById().'
            );
        }

        if (requestParameters['appVersion'] == null) {
            throw new runtime.RequiredError(
                'appVersion',
                'Required parameter "appVersion" was null or undefined when calling getSessionById().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['appName'] != null) {
            headerParameters['AppName'] = String(requestParameters['appName']);
        }

        if (requestParameters['appVersion'] != null) {
            headerParameters['AppVersion'] = String(requestParameters['appVersion']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/services/app/Quora/GetSessionById`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSessionById200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async getSessionById(requestParameters: GetSessionByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSessionById200Response> {
        const response = await this.getSessionByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取随身答
     */
    async getSessionsRaw(requestParameters: GetSessionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSessions200Response>> {
        if (requestParameters['appName'] == null) {
            throw new runtime.RequiredError(
                'appName',
                'Required parameter "appName" was null or undefined when calling getSessions().'
            );
        }

        if (requestParameters['appVersion'] == null) {
            throw new runtime.RequiredError(
                'appVersion',
                'Required parameter "appVersion" was null or undefined when calling getSessions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['appName'] != null) {
            headerParameters['AppName'] = String(requestParameters['appName']);
        }

        if (requestParameters['appVersion'] != null) {
            headerParameters['AppVersion'] = String(requestParameters['appVersion']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/services/app/Quora/GetSessions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetSessionsRequestToJSON(requestParameters['getSessionsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSessions200ResponseFromJSON(jsonValue));
    }

    /**
     * 获取随身答
     */
    async getSessions(requestParameters: GetSessionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSessions200Response> {
        const response = await this.getSessionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async resetReadStateRaw(requestParameters: ResetReadStateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResetReadState200Response>> {
        if (requestParameters['appName'] == null) {
            throw new runtime.RequiredError(
                'appName',
                'Required parameter "appName" was null or undefined when calling resetReadState().'
            );
        }

        if (requestParameters['appVersion'] == null) {
            throw new runtime.RequiredError(
                'appVersion',
                'Required parameter "appVersion" was null or undefined when calling resetReadState().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['sessionId'] != null) {
            queryParameters['sessionId'] = requestParameters['sessionId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['appName'] != null) {
            headerParameters['AppName'] = String(requestParameters['appName']);
        }

        if (requestParameters['appVersion'] != null) {
            headerParameters['AppVersion'] = String(requestParameters['appVersion']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/services/app/Quora/ResetReadState`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResetReadState200ResponseFromJSON(jsonValue));
    }

    /**
     * 
     */
    async resetReadState(requestParameters: ResetReadStateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResetReadState200Response> {
        const response = await this.resetReadStateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 搜索问题
     */
    async searchQuoraRaw(requestParameters: SearchQuoraOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchQuora200Response>> {
        if (requestParameters['appName'] == null) {
            throw new runtime.RequiredError(
                'appName',
                'Required parameter "appName" was null or undefined when calling searchQuora().'
            );
        }

        if (requestParameters['appVersion'] == null) {
            throw new runtime.RequiredError(
                'appVersion',
                'Required parameter "appVersion" was null or undefined when calling searchQuora().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['appName'] != null) {
            headerParameters['AppName'] = String(requestParameters['appName']);
        }

        if (requestParameters['appVersion'] != null) {
            headerParameters['AppVersion'] = String(requestParameters['appVersion']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/services/app/Quora/SearchQuora`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchQuoraRequestToJSON(requestParameters['searchQuoraRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchQuora200ResponseFromJSON(jsonValue));
    }

    /**
     * 搜索问题
     */
    async searchQuora(requestParameters: SearchQuoraOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchQuora200Response> {
        const response = await this.searchQuoraRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async setQuoraCollectRaw(requestParameters: SetQuoraCollectOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SetQuoraCollect200Response>> {
        if (requestParameters['appName'] == null) {
            throw new runtime.RequiredError(
                'appName',
                'Required parameter "appName" was null or undefined when calling setQuoraCollect().'
            );
        }

        if (requestParameters['appVersion'] == null) {
            throw new runtime.RequiredError(
                'appVersion',
                'Required parameter "appVersion" was null or undefined when calling setQuoraCollect().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['appName'] != null) {
            headerParameters['AppName'] = String(requestParameters['appName']);
        }

        if (requestParameters['appVersion'] != null) {
            headerParameters['AppVersion'] = String(requestParameters['appVersion']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/services/app/Quora/SetQuoraCollectAsync`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetQuoraCollectRequestToJSON(requestParameters['setQuoraCollectRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SetQuoraCollect200ResponseFromJSON(jsonValue));
    }

    /**
     * 
     */
    async setQuoraCollect(requestParameters: SetQuoraCollectOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SetQuoraCollect200Response> {
        const response = await this.setQuoraCollectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async updateCatalogRaw(requestParameters: UpdateCatalogOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResetReadState200Response>> {
        if (requestParameters['appName'] == null) {
            throw new runtime.RequiredError(
                'appName',
                'Required parameter "appName" was null or undefined when calling updateCatalog().'
            );
        }

        if (requestParameters['appVersion'] == null) {
            throw new runtime.RequiredError(
                'appVersion',
                'Required parameter "appVersion" was null or undefined when calling updateCatalog().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['appName'] != null) {
            headerParameters['AppName'] = String(requestParameters['appName']);
        }

        if (requestParameters['appVersion'] != null) {
            headerParameters['AppVersion'] = String(requestParameters['appVersion']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/services/app/Quora/UpdateCatalog`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateCatalogRequestToJSON(requestParameters['updateCatalogRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResetReadState200ResponseFromJSON(jsonValue));
    }

    /**
     * 
     */
    async updateCatalog(requestParameters: UpdateCatalogOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResetReadState200Response> {
        const response = await this.updateCatalogRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
