/* tslint:disable */
/* eslint-disable */
/**
 * 中育API
 * 中育的api
 *
 * The version of the OpenAPI document: 1.0
 * Contact: 3262392248@qq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Answers,
  AskForHelp200Response,
  AskForHelpRequest,
  GetExamTask200Response,
  GetNoQstExam200Response,
  GetQuestionView200Response,
  GetStudentTaskList200Response,
  GetStudentTaskListRequest,
} from '../models/index';
import {
    AnswersFromJSON,
    AnswersToJSON,
    AskForHelp200ResponseFromJSON,
    AskForHelp200ResponseToJSON,
    AskForHelpRequestFromJSON,
    AskForHelpRequestToJSON,
    GetExamTask200ResponseFromJSON,
    GetExamTask200ResponseToJSON,
    GetNoQstExam200ResponseFromJSON,
    GetNoQstExam200ResponseToJSON,
    GetQuestionView200ResponseFromJSON,
    GetQuestionView200ResponseToJSON,
    GetStudentTaskList200ResponseFromJSON,
    GetStudentTaskList200ResponseToJSON,
    GetStudentTaskListRequestFromJSON,
    GetStudentTaskListRequestToJSON,
} from '../models/index';

export interface AskForHelpOperationRequest {
    appVersion: number;
    appName: string;
    askForHelpRequest?: AskForHelpRequest;
}

export interface CompleteRequest {
    appVersion: number;
    appName: string;
    id: number;
    isRevising: boolean;
}

export interface ExamAnswerRequest {
    appVersion: number;
    appName: string;
    taskId?: number;
    answers?: Answers;
}

export interface GetExamTaskRequest {
    appName: string;
    appVersion: number;
    id: number;
}

export interface GetNoQstExamRequest {
    id: number;
    appName: string;
    appVersion: number;
}

export interface GetQuestionViewRequest {
    appVersion: number;
    appName: string;
    examId: number;
    questionId: number;
}

export interface GetStudentTaskListOperationRequest {
    appName: string;
    appVersion: number;
    getStudentTaskListRequest?: GetStudentTaskListRequest;
}

export interface NoQstExamAnswerRequest {
    appName: string;
    appVersion: number;
    taskId: number;
    answers?: Array<Answers>;
}

/**
 * 
 */
export class TaskApi extends runtime.BaseAPI {

    /**
     * 
     */
    async askForHelpRaw(requestParameters: AskForHelpOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AskForHelp200Response>> {
        if (requestParameters['appVersion'] == null) {
            throw new runtime.RequiredError(
                'appVersion',
                'Required parameter "appVersion" was null or undefined when calling askForHelp().'
            );
        }

        if (requestParameters['appName'] == null) {
            throw new runtime.RequiredError(
                'appName',
                'Required parameter "appName" was null or undefined when calling askForHelp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['appVersion'] != null) {
            headerParameters['AppVersion'] = String(requestParameters['appVersion']);
        }

        if (requestParameters['appName'] != null) {
            headerParameters['AppName'] = String(requestParameters['appName']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/services/app/Task/AskForHelpAsync`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AskForHelpRequestToJSON(requestParameters['askForHelpRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AskForHelp200ResponseFromJSON(jsonValue));
    }

    /**
     * 
     */
    async askForHelp(requestParameters: AskForHelpOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AskForHelp200Response> {
        const response = await this.askForHelpRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async completeRaw(requestParameters: CompleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AskForHelp200Response>> {
        if (requestParameters['appVersion'] == null) {
            throw new runtime.RequiredError(
                'appVersion',
                'Required parameter "appVersion" was null or undefined when calling complete().'
            );
        }

        if (requestParameters['appName'] == null) {
            throw new runtime.RequiredError(
                'appName',
                'Required parameter "appName" was null or undefined when calling complete().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling complete().'
            );
        }

        if (requestParameters['isRevising'] == null) {
            throw new runtime.RequiredError(
                'isRevising',
                'Required parameter "isRevising" was null or undefined when calling complete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['isRevising'] != null) {
            queryParameters['isRevising'] = requestParameters['isRevising'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['appVersion'] != null) {
            headerParameters['AppVersion'] = String(requestParameters['appVersion']);
        }

        if (requestParameters['appName'] != null) {
            headerParameters['AppName'] = String(requestParameters['appName']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/services/app/Task/CompleteAsync`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AskForHelp200ResponseFromJSON(jsonValue));
    }

    /**
     * 
     */
    async complete(requestParameters: CompleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AskForHelp200Response> {
        const response = await this.completeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async examAnswerRaw(requestParameters: ExamAnswerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AskForHelp200Response>> {
        if (requestParameters['appVersion'] == null) {
            throw new runtime.RequiredError(
                'appVersion',
                'Required parameter "appVersion" was null or undefined when calling examAnswer().'
            );
        }

        if (requestParameters['appName'] == null) {
            throw new runtime.RequiredError(
                'appName',
                'Required parameter "appName" was null or undefined when calling examAnswer().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['taskId'] != null) {
            queryParameters['taskId'] = requestParameters['taskId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['appVersion'] != null) {
            headerParameters['AppVersion'] = String(requestParameters['appVersion']);
        }

        if (requestParameters['appName'] != null) {
            headerParameters['AppName'] = String(requestParameters['appName']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/services/app/Task/ExamAnswerAsync`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AnswersToJSON(requestParameters['answers']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AskForHelp200ResponseFromJSON(jsonValue));
    }

    /**
     * 
     */
    async examAnswer(requestParameters: ExamAnswerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AskForHelp200Response> {
        const response = await this.examAnswerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async getExamTaskRaw(requestParameters: GetExamTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetExamTask200Response>> {
        if (requestParameters['appName'] == null) {
            throw new runtime.RequiredError(
                'appName',
                'Required parameter "appName" was null or undefined when calling getExamTask().'
            );
        }

        if (requestParameters['appVersion'] == null) {
            throw new runtime.RequiredError(
                'appVersion',
                'Required parameter "appVersion" was null or undefined when calling getExamTask().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getExamTask().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['appName'] != null) {
            headerParameters['AppName'] = String(requestParameters['appName']);
        }

        if (requestParameters['appVersion'] != null) {
            headerParameters['AppVersion'] = String(requestParameters['appVersion']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/services/app/Task/GetExamTaskAsync`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetExamTask200ResponseFromJSON(jsonValue));
    }

    /**
     * 
     */
    async getExamTask(requestParameters: GetExamTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetExamTask200Response> {
        const response = await this.getExamTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async getNoQstExamRaw(requestParameters: GetNoQstExamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetNoQstExam200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getNoQstExam().'
            );
        }

        if (requestParameters['appName'] == null) {
            throw new runtime.RequiredError(
                'appName',
                'Required parameter "appName" was null or undefined when calling getNoQstExam().'
            );
        }

        if (requestParameters['appVersion'] == null) {
            throw new runtime.RequiredError(
                'appVersion',
                'Required parameter "appVersion" was null or undefined when calling getNoQstExam().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['appName'] != null) {
            headerParameters['AppName'] = String(requestParameters['appName']);
        }

        if (requestParameters['appVersion'] != null) {
            headerParameters['AppVersion'] = String(requestParameters['appVersion']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/services/app/Task/GetNoQstExamTaskAsync`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetNoQstExam200ResponseFromJSON(jsonValue));
    }

    /**
     * 
     */
    async getNoQstExam(requestParameters: GetNoQstExamRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetNoQstExam200Response> {
        const response = await this.getNoQstExamRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async getQuestionViewRaw(requestParameters: GetQuestionViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetQuestionView200Response>> {
        if (requestParameters['appVersion'] == null) {
            throw new runtime.RequiredError(
                'appVersion',
                'Required parameter "appVersion" was null or undefined when calling getQuestionView().'
            );
        }

        if (requestParameters['appName'] == null) {
            throw new runtime.RequiredError(
                'appName',
                'Required parameter "appName" was null or undefined when calling getQuestionView().'
            );
        }

        if (requestParameters['examId'] == null) {
            throw new runtime.RequiredError(
                'examId',
                'Required parameter "examId" was null or undefined when calling getQuestionView().'
            );
        }

        if (requestParameters['questionId'] == null) {
            throw new runtime.RequiredError(
                'questionId',
                'Required parameter "questionId" was null or undefined when calling getQuestionView().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['examId'] != null) {
            queryParameters['examId'] = requestParameters['examId'];
        }

        if (requestParameters['questionId'] != null) {
            queryParameters['questionId'] = requestParameters['questionId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['appVersion'] != null) {
            headerParameters['AppVersion'] = String(requestParameters['appVersion']);
        }

        if (requestParameters['appName'] != null) {
            headerParameters['AppName'] = String(requestParameters['appName']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/services/app/Task/GetQuestionViewAsync`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetQuestionView200ResponseFromJSON(jsonValue));
    }

    /**
     * 
     */
    async getQuestionView(requestParameters: GetQuestionViewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetQuestionView200Response> {
        const response = await this.getQuestionViewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取任务列表
     */
    async getStudentTaskListRaw(requestParameters: GetStudentTaskListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetStudentTaskList200Response>> {
        if (requestParameters['appName'] == null) {
            throw new runtime.RequiredError(
                'appName',
                'Required parameter "appName" was null or undefined when calling getStudentTaskList().'
            );
        }

        if (requestParameters['appVersion'] == null) {
            throw new runtime.RequiredError(
                'appVersion',
                'Required parameter "appVersion" was null or undefined when calling getStudentTaskList().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['appName'] != null) {
            headerParameters['AppName'] = String(requestParameters['appName']);
        }

        if (requestParameters['appVersion'] != null) {
            headerParameters['AppVersion'] = String(requestParameters['appVersion']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/services/app/Task/GetStudentTaskListAsync`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetStudentTaskListRequestToJSON(requestParameters['getStudentTaskListRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetStudentTaskList200ResponseFromJSON(jsonValue));
    }

    /**
     * 获取任务列表
     */
    async getStudentTaskList(requestParameters: GetStudentTaskListOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetStudentTaskList200Response> {
        const response = await this.getStudentTaskListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async noQstExamAnswerRaw(requestParameters: NoQstExamAnswerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AskForHelp200Response>> {
        if (requestParameters['appName'] == null) {
            throw new runtime.RequiredError(
                'appName',
                'Required parameter "appName" was null or undefined when calling noQstExamAnswer().'
            );
        }

        if (requestParameters['appVersion'] == null) {
            throw new runtime.RequiredError(
                'appVersion',
                'Required parameter "appVersion" was null or undefined when calling noQstExamAnswer().'
            );
        }

        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling noQstExamAnswer().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['taskId'] != null) {
            queryParameters['taskId'] = requestParameters['taskId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['appName'] != null) {
            headerParameters['AppName'] = String(requestParameters['appName']);
        }

        if (requestParameters['appVersion'] != null) {
            headerParameters['AppVersion'] = String(requestParameters['appVersion']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/services/app/Task/NoQstExamAnswerAsync`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['answers']!.map(AnswersToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AskForHelp200ResponseFromJSON(jsonValue));
    }

    /**
     * 
     */
    async noQstExamAnswer(requestParameters: NoQstExamAnswerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AskForHelp200Response> {
        const response = await this.noQstExamAnswerRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
