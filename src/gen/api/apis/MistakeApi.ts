/* tslint:disable */
/* eslint-disable */
/**
 * 中育API
 * 中育的api
 *
 * The version of the OpenAPI document: 1.0
 * Contact: 3262392248@qq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddCustomMistakeQstItem200Response,
  AddInMistakeBook200Response,
  AddInMistakeBookRequest,
  AddPictureNote200Response,
  AddPictureNoteRequest,
  CustomMistakeQstItem,
  GetCustomMistakeQstItemDetailInfo200Response,
  GetDnUrl200Response,
  GetMistakeQstItemDetailInfo200Response,
  GetMyMistakeBooks200Response,
  GetMyTags200Response,
  MultiRemoveMistakeItemsRequest,
  MultiSetTagsRequest,
  SearchMistakeQstItems200Response,
  SearchMistakeQstItemsRequest,
  SetNoteRequest,
} from '../models/index';
import {
    AddCustomMistakeQstItem200ResponseFromJSON,
    AddCustomMistakeQstItem200ResponseToJSON,
    AddInMistakeBook200ResponseFromJSON,
    AddInMistakeBook200ResponseToJSON,
    AddInMistakeBookRequestFromJSON,
    AddInMistakeBookRequestToJSON,
    AddPictureNote200ResponseFromJSON,
    AddPictureNote200ResponseToJSON,
    AddPictureNoteRequestFromJSON,
    AddPictureNoteRequestToJSON,
    CustomMistakeQstItemFromJSON,
    CustomMistakeQstItemToJSON,
    GetCustomMistakeQstItemDetailInfo200ResponseFromJSON,
    GetCustomMistakeQstItemDetailInfo200ResponseToJSON,
    GetDnUrl200ResponseFromJSON,
    GetDnUrl200ResponseToJSON,
    GetMistakeQstItemDetailInfo200ResponseFromJSON,
    GetMistakeQstItemDetailInfo200ResponseToJSON,
    GetMyMistakeBooks200ResponseFromJSON,
    GetMyMistakeBooks200ResponseToJSON,
    GetMyTags200ResponseFromJSON,
    GetMyTags200ResponseToJSON,
    MultiRemoveMistakeItemsRequestFromJSON,
    MultiRemoveMistakeItemsRequestToJSON,
    MultiSetTagsRequestFromJSON,
    MultiSetTagsRequestToJSON,
    SearchMistakeQstItems200ResponseFromJSON,
    SearchMistakeQstItems200ResponseToJSON,
    SearchMistakeQstItemsRequestFromJSON,
    SearchMistakeQstItemsRequestToJSON,
    SetNoteRequestFromJSON,
    SetNoteRequestToJSON,
} from '../models/index';

export interface AddCustomMistakeQstItemRequest {
    appVersion: number;
    appName: string;
    customMistakeQstItem: CustomMistakeQstItem;
}

export interface AddInMistakeBookOperationRequest {
    appVersion: number;
    appName: string;
    addInMistakeBookRequest?: AddInMistakeBookRequest;
}

export interface AddPictureNoteOperationRequest {
    appVersion: number;
    appName: string;
    addPictureNoteRequest?: AddPictureNoteRequest;
}

export interface GetCustomMistakeQstItemDetailInfoRequest {
    appVersion: number;
    appName: string;
    itemId?: number;
}

export interface GetMistakeQstItemDetailInfoRequest {
    appName: string;
    appVersion: number;
    itemId?: number;
}

export interface GetMyMistakeBooksRequest {
    appName: string;
    appVersion: number;
}

export interface GetMyTagsRequest {
    appName: string;
    appVersion: number;
}

export interface MultiRemoveMistakeItemsOperationRequest {
    appName: string;
    appVersion: number;
    multiRemoveMistakeItemsRequest?: MultiRemoveMistakeItemsRequest;
}

export interface MultiSetTagsOperationRequest {
    appVersion: number;
    appName: string;
    multiSetTagsRequest?: MultiSetTagsRequest;
}

export interface SearchMistakeQstItemsOperationRequest {
    appName: string;
    appVersion: number;
    searchMistakeQstItemsRequest?: SearchMistakeQstItemsRequest;
}

export interface SetNoteOperationRequest {
    appVersion: number;
    appName: string;
    setNoteRequest?: SetNoteRequest;
}

/**
 * 
 */
export class MistakeApi extends runtime.BaseAPI {

    /**
     * 
     */
    async addCustomMistakeQstItemRaw(requestParameters: AddCustomMistakeQstItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddCustomMistakeQstItem200Response>> {
        if (requestParameters['appVersion'] == null) {
            throw new runtime.RequiredError(
                'appVersion',
                'Required parameter "appVersion" was null or undefined when calling addCustomMistakeQstItem().'
            );
        }

        if (requestParameters['appName'] == null) {
            throw new runtime.RequiredError(
                'appName',
                'Required parameter "appName" was null or undefined when calling addCustomMistakeQstItem().'
            );
        }

        if (requestParameters['customMistakeQstItem'] == null) {
            throw new runtime.RequiredError(
                'customMistakeQstItem',
                'Required parameter "customMistakeQstItem" was null or undefined when calling addCustomMistakeQstItem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['appVersion'] != null) {
            headerParameters['AppVersion'] = String(requestParameters['appVersion']);
        }

        if (requestParameters['appName'] != null) {
            headerParameters['AppName'] = String(requestParameters['appName']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/services/app/MistakeBook/AddCustomMistakeQstItemAsync`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomMistakeQstItemToJSON(requestParameters['customMistakeQstItem']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddCustomMistakeQstItem200ResponseFromJSON(jsonValue));
    }

    /**
     * 
     */
    async addCustomMistakeQstItem(requestParameters: AddCustomMistakeQstItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddCustomMistakeQstItem200Response> {
        const response = await this.addCustomMistakeQstItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async addInMistakeBookRaw(requestParameters: AddInMistakeBookOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddInMistakeBook200Response>> {
        if (requestParameters['appVersion'] == null) {
            throw new runtime.RequiredError(
                'appVersion',
                'Required parameter "appVersion" was null or undefined when calling addInMistakeBook().'
            );
        }

        if (requestParameters['appName'] == null) {
            throw new runtime.RequiredError(
                'appName',
                'Required parameter "appName" was null or undefined when calling addInMistakeBook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['appVersion'] != null) {
            headerParameters['AppVersion'] = String(requestParameters['appVersion']);
        }

        if (requestParameters['appName'] != null) {
            headerParameters['AppName'] = String(requestParameters['appName']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/services/app/MistakeBook/AddInMistakeBookAsync`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddInMistakeBookRequestToJSON(requestParameters['addInMistakeBookRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddInMistakeBook200ResponseFromJSON(jsonValue));
    }

    /**
     * 
     */
    async addInMistakeBook(requestParameters: AddInMistakeBookOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddInMistakeBook200Response> {
        const response = await this.addInMistakeBookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async addPictureNoteRaw(requestParameters: AddPictureNoteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddPictureNote200Response>> {
        if (requestParameters['appVersion'] == null) {
            throw new runtime.RequiredError(
                'appVersion',
                'Required parameter "appVersion" was null or undefined when calling addPictureNote().'
            );
        }

        if (requestParameters['appName'] == null) {
            throw new runtime.RequiredError(
                'appName',
                'Required parameter "appName" was null or undefined when calling addPictureNote().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['appVersion'] != null) {
            headerParameters['AppVersion'] = String(requestParameters['appVersion']);
        }

        if (requestParameters['appName'] != null) {
            headerParameters['AppName'] = String(requestParameters['appName']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/services/app/MistakeBook/AddPictureNoteAsync`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddPictureNoteRequestToJSON(requestParameters['addPictureNoteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddPictureNote200ResponseFromJSON(jsonValue));
    }

    /**
     * 
     */
    async addPictureNote(requestParameters: AddPictureNoteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddPictureNote200Response> {
        const response = await this.addPictureNoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async getCustomMistakeQstItemDetailInfoRaw(requestParameters: GetCustomMistakeQstItemDetailInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCustomMistakeQstItemDetailInfo200Response>> {
        if (requestParameters['appVersion'] == null) {
            throw new runtime.RequiredError(
                'appVersion',
                'Required parameter "appVersion" was null or undefined when calling getCustomMistakeQstItemDetailInfo().'
            );
        }

        if (requestParameters['appName'] == null) {
            throw new runtime.RequiredError(
                'appName',
                'Required parameter "appName" was null or undefined when calling getCustomMistakeQstItemDetailInfo().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['itemId'] != null) {
            queryParameters['itemId'] = requestParameters['itemId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['appVersion'] != null) {
            headerParameters['AppVersion'] = String(requestParameters['appVersion']);
        }

        if (requestParameters['appName'] != null) {
            headerParameters['AppName'] = String(requestParameters['appName']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/services/app/MistakeBook/GetCustomMistakeQstItemDetailInfoAsync`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCustomMistakeQstItemDetailInfo200ResponseFromJSON(jsonValue));
    }

    /**
     * 
     */
    async getCustomMistakeQstItemDetailInfo(requestParameters: GetCustomMistakeQstItemDetailInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCustomMistakeQstItemDetailInfo200Response> {
        const response = await this.getCustomMistakeQstItemDetailInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取错题问题信息
     */
    async getMistakeQstItemDetailInfoRaw(requestParameters: GetMistakeQstItemDetailInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMistakeQstItemDetailInfo200Response>> {
        if (requestParameters['appName'] == null) {
            throw new runtime.RequiredError(
                'appName',
                'Required parameter "appName" was null or undefined when calling getMistakeQstItemDetailInfo().'
            );
        }

        if (requestParameters['appVersion'] == null) {
            throw new runtime.RequiredError(
                'appVersion',
                'Required parameter "appVersion" was null or undefined when calling getMistakeQstItemDetailInfo().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['itemId'] != null) {
            queryParameters['itemId'] = requestParameters['itemId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['appName'] != null) {
            headerParameters['AppName'] = String(requestParameters['appName']);
        }

        if (requestParameters['appVersion'] != null) {
            headerParameters['AppVersion'] = String(requestParameters['appVersion']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/services/app/MistakeBook/GetMistakeQstItemDetailInfoAsync`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMistakeQstItemDetailInfo200ResponseFromJSON(jsonValue));
    }

    /**
     * 获取错题问题信息
     */
    async getMistakeQstItemDetailInfo(requestParameters: GetMistakeQstItemDetailInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMistakeQstItemDetailInfo200Response> {
        const response = await this.getMistakeQstItemDetailInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取错题本
     */
    async getMyMistakeBooksRaw(requestParameters: GetMyMistakeBooksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMyMistakeBooks200Response>> {
        if (requestParameters['appName'] == null) {
            throw new runtime.RequiredError(
                'appName',
                'Required parameter "appName" was null or undefined when calling getMyMistakeBooks().'
            );
        }

        if (requestParameters['appVersion'] == null) {
            throw new runtime.RequiredError(
                'appVersion',
                'Required parameter "appVersion" was null or undefined when calling getMyMistakeBooks().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['appName'] != null) {
            headerParameters['AppName'] = String(requestParameters['appName']);
        }

        if (requestParameters['appVersion'] != null) {
            headerParameters['AppVersion'] = String(requestParameters['appVersion']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/services/app/MistakeBook/GetMyMistakeBooksAsync`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMyMistakeBooks200ResponseFromJSON(jsonValue));
    }

    /**
     * 获取错题本
     */
    async getMyMistakeBooks(requestParameters: GetMyMistakeBooksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMyMistakeBooks200Response> {
        const response = await this.getMyMistakeBooksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取标签
     */
    async getMyTagsRaw(requestParameters: GetMyTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMyTags200Response>> {
        if (requestParameters['appName'] == null) {
            throw new runtime.RequiredError(
                'appName',
                'Required parameter "appName" was null or undefined when calling getMyTags().'
            );
        }

        if (requestParameters['appVersion'] == null) {
            throw new runtime.RequiredError(
                'appVersion',
                'Required parameter "appVersion" was null or undefined when calling getMyTags().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['appName'] != null) {
            headerParameters['AppName'] = String(requestParameters['appName']);
        }

        if (requestParameters['appVersion'] != null) {
            headerParameters['AppVersion'] = String(requestParameters['appVersion']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/services/app/MistakeBook/GetMyTags`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMyTags200ResponseFromJSON(jsonValue));
    }

    /**
     * 获取标签
     */
    async getMyTags(requestParameters: GetMyTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMyTags200Response> {
        const response = await this.getMyTagsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 移除多个错题
     */
    async multiRemoveMistakeItemsRaw(requestParameters: MultiRemoveMistakeItemsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetDnUrl200Response>> {
        if (requestParameters['appName'] == null) {
            throw new runtime.RequiredError(
                'appName',
                'Required parameter "appName" was null or undefined when calling multiRemoveMistakeItems().'
            );
        }

        if (requestParameters['appVersion'] == null) {
            throw new runtime.RequiredError(
                'appVersion',
                'Required parameter "appVersion" was null or undefined when calling multiRemoveMistakeItems().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['appName'] != null) {
            headerParameters['AppName'] = String(requestParameters['appName']);
        }

        if (requestParameters['appVersion'] != null) {
            headerParameters['AppVersion'] = String(requestParameters['appVersion']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/services/app/MistakeBook/MultiRemoveMistakeItemsAsync`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MultiRemoveMistakeItemsRequestToJSON(requestParameters['multiRemoveMistakeItemsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetDnUrl200ResponseFromJSON(jsonValue));
    }

    /**
     * 移除多个错题
     */
    async multiRemoveMistakeItems(requestParameters: MultiRemoveMistakeItemsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetDnUrl200Response> {
        const response = await this.multiRemoveMistakeItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async multiSetTagsRaw(requestParameters: MultiSetTagsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddPictureNote200Response>> {
        if (requestParameters['appVersion'] == null) {
            throw new runtime.RequiredError(
                'appVersion',
                'Required parameter "appVersion" was null or undefined when calling multiSetTags().'
            );
        }

        if (requestParameters['appName'] == null) {
            throw new runtime.RequiredError(
                'appName',
                'Required parameter "appName" was null or undefined when calling multiSetTags().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['appVersion'] != null) {
            headerParameters['AppVersion'] = String(requestParameters['appVersion']);
        }

        if (requestParameters['appName'] != null) {
            headerParameters['AppName'] = String(requestParameters['appName']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/services/app/MistakeBook/MultiSetTagsAsync`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MultiSetTagsRequestToJSON(requestParameters['multiSetTagsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddPictureNote200ResponseFromJSON(jsonValue));
    }

    /**
     * 
     */
    async multiSetTags(requestParameters: MultiSetTagsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddPictureNote200Response> {
        const response = await this.multiSetTagsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 搜索错题问题
     */
    async searchMistakeQstItemsRaw(requestParameters: SearchMistakeQstItemsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchMistakeQstItems200Response>> {
        if (requestParameters['appName'] == null) {
            throw new runtime.RequiredError(
                'appName',
                'Required parameter "appName" was null or undefined when calling searchMistakeQstItems().'
            );
        }

        if (requestParameters['appVersion'] == null) {
            throw new runtime.RequiredError(
                'appVersion',
                'Required parameter "appVersion" was null or undefined when calling searchMistakeQstItems().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['appName'] != null) {
            headerParameters['AppName'] = String(requestParameters['appName']);
        }

        if (requestParameters['appVersion'] != null) {
            headerParameters['AppVersion'] = String(requestParameters['appVersion']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/services/app/MistakeBook/SearchMistakeQstItemsAsync`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchMistakeQstItemsRequestToJSON(requestParameters['searchMistakeQstItemsRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchMistakeQstItems200ResponseFromJSON(jsonValue));
    }

    /**
     * 搜索错题问题
     */
    async searchMistakeQstItems(requestParameters: SearchMistakeQstItemsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchMistakeQstItems200Response> {
        const response = await this.searchMistakeQstItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async setNoteRaw(requestParameters: SetNoteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddPictureNote200Response>> {
        if (requestParameters['appVersion'] == null) {
            throw new runtime.RequiredError(
                'appVersion',
                'Required parameter "appVersion" was null or undefined when calling setNote().'
            );
        }

        if (requestParameters['appName'] == null) {
            throw new runtime.RequiredError(
                'appName',
                'Required parameter "appName" was null or undefined when calling setNote().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['appVersion'] != null) {
            headerParameters['AppVersion'] = String(requestParameters['appVersion']);
        }

        if (requestParameters['appName'] != null) {
            headerParameters['AppName'] = String(requestParameters['appName']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("token", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/services/app/MistakeBook/SetNoteAsync`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetNoteRequestToJSON(requestParameters['setNoteRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddPictureNote200ResponseFromJSON(jsonValue));
    }

    /**
     * 
     */
    async setNote(requestParameters: SetNoteOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddPictureNote200Response> {
        const response = await this.setNoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
